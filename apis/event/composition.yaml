apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: events.elemental.aws.livewyer.io
spec:
  compositeTypeRef:
    apiVersion: elemental.aws.livewyer.io/v1alpha1
    kind: Event
  mode: Pipeline
  pipeline:
    - step: go-templating
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- define "replaceTemplateVars" -}}
              {{- $template := index . 0 -}}
              {{- $params := index . 1 -}}

              {{- if kindIs "map" $template -}}
                {{- $result := dict -}}
                {{- range $key, $value := $template -}}
                  {{- if kindIs "string" $value -}}
                    {{- if regexMatch "^\\{\\{\\s+\\w+\\s+\\}\\}$" $value -}}
                      {{- $varName := regexReplaceAll "^\\{\\{\\s+|\\s+\\}\\}$" $value "" -}}
                      {{- $_ := set $result $key (index $params $varName) -}}
                    {{- else if regexMatch "\\{\\{\\s+\\w+\\s+\\}\\}" $value -}}
                      {{- $processedValue := $value -}}
                      {{- range $varName, $varValue := $params -}}
                        {{- $quotedPattern := printf "\"\\{\\{\\s+%s\\s+\\}\\}\"" $varName -}}
                        {{- $unquotedPattern := printf "\\{\\{\\s+%s\\s+\\}\\}" $varName -}}
                        {{- $processedValue = regexReplaceAll $quotedPattern $processedValue (toString $varValue) -}}
                        {{- $processedValue = regexReplaceAll $unquotedPattern $processedValue (toString $varValue) -}}
                      {{- end -}}
                      {{- $_ := set $result $key $processedValue -}}
                    {{- else -}}
                      {{- $_ := set $result $key $value -}}
                    {{- end -}}
                  {{- else if or (kindIs "map" $value) (kindIs "slice" $value) -}}
                    {{- $processedValue := include "replaceTemplateVars" (list $value $params) | fromYaml -}}
                    {{- $_ := set $result $key $processedValue -}}
                  {{- else -}}
                    {{- $_ := set $result $key $value -}}
                  {{- end -}}
                {{- end -}}
                {{- $result | toYaml -}}
              {{- else if kindIs "slice" $template -}}
                {{- $result := list -}}
                {{- range $template -}}
                  {{- if kindIs "string" . -}}
                    {{- if regexMatch "^\\{\\{\\s+\\w+\\s+\\}\\}$" . -}}
                      {{- $varName := regexReplaceAll "^\\{\\{\\s+|\\s+\\}\\}$" . "" -}}
                      {{- $result = append $result (index $params $varName) -}}
                    {{- else if regexMatch "\\{\\{\\s+\\w+\\s+\\}\\}" . -}}
                      {{- $processedValue := . -}}
                      {{- range $varName, $varValue := $params -}}
                        {{- $quotedPattern := printf "\"\\{\\{\\s+%s\\s+\\}\\}\"" $varName -}}
                        {{- $unquotedPattern := printf "\\{\\{\\s+%s\\s+\\}\\}" $varName -}}
                        {{- $processedValue = regexReplaceAll $quotedPattern $processedValue (toString $varValue) -}}
                        {{- $processedValue = regexReplaceAll $unquotedPattern $processedValue (toString $varValue) -}}
                      {{- end -}}
                      {{- $result = append $result $processedValue -}}
                    {{- else -}}
                      {{- $result = append $result . -}}
                    {{- end -}}
                  {{- else if or (kindIs "map" .) (kindIs "slice" .) -}}
                    {{- $processedValue := include "replaceTemplateVars" (list . $params) | fromYaml -}}
                    {{- $result = append $result $processedValue -}}
                  {{- else -}}
                    {{- $result = append $result . -}}
                  {{- end -}}
                {{- end -}}
                {{- $result | toYaml -}}
              {{- else if kindIs "string" $template -}}
                {{- if regexMatch "^\\{\\{\\s+\\w+\\s+\\}\\}$" $template -}}
                  {{- $varName := regexReplaceAll "^\\{\\{\\s+|\\s+\\}\\}$" $template "" -}}
                  {{- index $params $varName -}}
                {{- else if regexMatch "\\{\\{\\s+\\w+\\s+\\}\\}" $template -}}
                  {{- $processedValue := $template -}}
                  {{- range $varName, $varValue := $params -}}
                    {{- $quotedPattern := printf "\"\\{\\{\\s+%s\\s+\\}\\}\"" $varName -}}
                    {{- $unquotedPattern := printf "\\{\\{\\s+%s\\s+\\}\\}" $varName -}}
                    {{- $processedValue = regexReplaceAll $quotedPattern $processedValue (toString $varValue) -}}
                    {{- $processedValue = regexReplaceAll $unquotedPattern $processedValue (toString $varValue) -}}
                  {{- end -}}
                  {{- $processedValue -}}
                {{- else -}}
                  {{- $template -}}
                {{- end -}}
              {{- else -}}
                {{- $template -}}
              {{- end -}}

            {{- end -}}

            {{- $id := $.observed.composite.resource.metadata.name -}}
            {{- $templateId := (printf "event.elemental.aws.livewyer.io/%s" $.observed.composite.resource.spec.workflowTemplate.id) -}}
            {{- $params := $.observed.composite.resource.spec.workflowTemplate.parameters -}}

            ---

            apiVersion: kubernetes.m.crossplane.io/v1alpha1
            kind: Object
            metadata:
              name: {{ $.observed.composite.resource.spec.workflowTemplate.id }}
              namespace: {{ default "default" $.observed.composite.resource.metadata.namespace }}
              annotations:
                {{ setResourceNameAnnotation (printf "event.elemental.aws.livewyer.io/%s" $id) }}
            spec:
              forProvider:
                manifest:
                  apiVersion: nop.crossplane.io/v1alpha1
                  kind: NopResource
                  metadata:
                    name: {{ $.observed.composite.resource.spec.workflowTemplate.id }}
              providerConfigRef:
                name: kubernetes-provider
              managementPolicies: ["Observe"]

            ---

            apiVersion: elemental.aws.livewyer.io/v1alpha1
            kind: Workflow
            metadata:
              name: {{ $id }}
              namespace: {{ default "default" $.observed.composite.resource.metadata.namespace }}
              annotations:
                {{ setResourceNameAnnotation (printf "workflow.elemental.aws.livewyer.io/%s" $id) }}
              labels:
                elemental.aws.livewyer.io/workflow: {{ $id }}
            spec:
              {{- $templateSource := get (getComposedResource . $templateId).status.atProvider.manifest.spec.forProvider "fields" -}}
              {{ $processedTemplate := include "replaceTemplateVars" (list $templateSource $params) | fromYaml }}
              forProvider: {{ default (default (dict) $processedTemplate.forProvider) $.observed.composite.resource.spec.forProvider | toJson }}
              providerConfigRef: {{ default (default (dict "name" "default") $processedTemplate.providerConfigRef) $.observed.composite.resource.spec.providerConfigRef | toJson }}
              steps: {{ $processedTemplate.steps | toJson }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
